McIntyre Watts
CS542
Spring 2015

Programming Option, Part 1 and 2

A values store (a simplified version of a key-value store). The value store has just three interfaces:
      Put(key, data): stores data under the given key.
      Get(key): retrieves the data.
      Remove(key): deletes the key.

The value byte array can be arbitrarily large, up to 1 GB.
In addition, there is an indexing mechanism used to organize data, a
B+ tree.  This is done using a tree class and two node classes.  One
node class is for interior nodes, another for leaf nodes which
actually store data.

The program opens a default database when run; all invocations from
the same executable default to the same databadse, though they could
theoretically be attached to a different database.  Internally, the
value-store is represented by a python dctionary (a map type) which is
serialized to a file for persistent and cross-invocation existence.

The program opens an interactive prompt where a user can
put/get/remove using a space-separated command syntax.

Concurrency/interactions
The following interactions should be prevented:

1. Simulataneous puts/removes could leave the value store in a state
where the change made by one operation is simply lost.  Thus, write
operations to the store need to be strictly ordered/atomic.  This
should be enforced by the python file handling routines; only 1 thread
can acquire write priveleges at a time.
However, the code also needs to check the store so it does not
overwrite changes.  Once a change is ready to be made:
-The store is read.
-The local copy is updated.
-The store is written back.

2. A get simultaneous/shortly interleaved with a put/remove.  It is
possible that the data returned by a get is out-of-date very quickly
based on changes to the store.
File Locks are handled through a directory of empty files using the file
control system in order to have a persistent record across separate
concurrent invocations.  Files for deleted keys remain, but will not
be accessed.

For part 2, a b+tree is used instead of a simple dictionary store.  It
still reads/writes at the same places in order to prevent unwanted
interaction, which has a heavy performance penalty, especially for
larger databases.
In order to prevent concurrent actions, most of the benefits of the
indexing system are given up, as it is not read just in part, many
disk accesses are necessary.  However, if these interactions were
prevented in some other manner the index mechanism would be easily converted.



For part 3, a schema was added as a parameter and value of the store
mechanism object.  It was a list of dictionary keys that described the
columns in order.
The b+tree store-equivalent class was also modified to keep track of
its own disk-storage information.

The assumption was made that the country table can fit entirely in
memory.  This was done because the number of existing countries is
known, small, and changes only slowly.  There is no prediction that we
would need to modify the country table in the forseeable future or
that it might change noticeably in size.

The Open/get-next/close pattern was used to avoid disk access(more
precisely, disk updates and locking) with every part of a large operation.

To review, the program uses 4 major classes.  The b+tree class
provides indexing, file-system information, and interfaces between the
data in the relation and the main class.  Each instance of ths class
describes one relation.
The next two classes represent leaf nodes and interior nodes in the
tree.
The fourth 'class' is the main program, which creates the tables and
performs the test operations on them.  It contains the
open/get-next/close methods and get/remove methods that operate on a
passed in instance of a b+tree.

To test it, the csv module was used to read in data from the provided
relations.  Two queries were made to the relations, and the matching
cities printed.  These were checked manually with the country table's
total population and the entries for those cities.
